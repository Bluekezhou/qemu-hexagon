##
##  Copyright(c) 2019-2020 Qualcomm Innovation Center, Inc. All Rights Reserved.
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, see <http://www.gnu.org/licenses/>.
##

TARGET_SRC_PATH = $(SRC_PATH)/target/$(TARGET_BASE_ARCH)

obj-y += \
    cpu.o \
    translate.o \
    op_helper.o \
    gdbstub.o \
    genptr.o \
    reg_fields.o \
    decode.o \
    iclass.o \
    opcodes.o \
    printinsn.o \
    arch.o \
    fma_emu.o \
    conv_emu.o \
    mmvec/decode_ext_mmvec.o \
    mmvec/system_ext_mmvec.o \
    auto-tcg.o

#
#  Step 1
#  We use a C program to create semantics_generated.pyinc
#
BUILD_USER_DIR = $(BUILD_DIR)/hexagon-linux-user
GEN_SEMANTICS = gen_semantics
GEN_SEMANTICS_SRC = $(TARGET_SRC_PATH)/gen_semantics.c

IDEF_FILES = \
    $(TARGET_SRC_PATH)/imported/alu.idef \
    $(TARGET_SRC_PATH)/imported/branch.idef \
    $(TARGET_SRC_PATH)/imported/compare.idef \
    $(TARGET_SRC_PATH)/imported/float.idef \
    $(TARGET_SRC_PATH)/imported/ldst.idef \
    $(TARGET_SRC_PATH)/imported/mpy.idef \
    $(TARGET_SRC_PATH)/imported/shift.idef \
    $(TARGET_SRC_PATH)/imported/subinsns.idef \
    $(TARGET_SRC_PATH)/imported/system.idef \
    $(TARGET_SRC_PATH)/imported/allext.idef \
    $(TARGET_SRC_PATH)/imported/mmvec/ext.idef
DEF_FILES = \
    $(TARGET_SRC_PATH)/imported/allidefs.def \
    $(TARGET_SRC_PATH)/imported/macros.def \
    $(TARGET_SRC_PATH)/imported/allext_macros.def \
    $(TARGET_SRC_PATH)/imported/mmvec/macros.def

$(GEN_SEMANTICS): $(GEN_SEMANTICS_SRC) $(IDEF_FILES) $(DEF_FILES)
	$(CC) $(CFLAGS) $(GEN_SEMANTICS_SRC) -o $(GEN_SEMANTICS)

SEMANTICS=semantics_generated.pyinc
$(SEMANTICS): $(GEN_SEMANTICS)
	$(call quiet-command, \
	    $(BUILD_USER_DIR)/$(GEN_SEMANTICS) $(SEMANTICS), \
	    "GEN", $(SEMANTICS))

#
# Step 2
# We use the do_qemu.py script to generate the following files
#
QEMU_DEF_H = $(BUILD_USER_DIR)/qemu_def_generated.h
OPCODES_DEF_H = $(BUILD_USER_DIR)/opcodes_def_generated.h
OP_ATTRIBS_H = $(BUILD_USER_DIR)/op_attribs_generated.h
OP_REGS_H = $(BUILD_USER_DIR)/op_regs_generated.h
PRINTINSN_H = $(BUILD_USER_DIR)/printinsn_generated.h

GENERATED_HEXAGON_FILES = \
    $(QEMU_DEF_H) \
    $(OPCODES_DEF_H) \
    $(OP_ATTRIBS_H) \
    $(OP_REGS_H) \
    $(PRINTINSN_H)

$(GENERATED_HEXAGON_FILES): \
    $(TARGET_SRC_PATH)/do_qemu.py \
    $(SEMANTICS) \
    $(TARGET_SRC_PATH)/attribs_def.h
	$(call quiet-command, \
	    $(TARGET_SRC_PATH)/do_qemu.py \
                $(SEMANTICS) \
                $(TARGET_SRC_PATH)/attribs_def.h, \
	    "GEN", "Hexagon generated files")

#
# Step 3
# We use a C program to create iset.py which is imported into dectree.py
# to create the decode tree
#
GEN_DECTREE_IMPORT=gen_dectree_import
GEN_DECTREE_IMPORT_SRC = $(TARGET_SRC_PATH)/gen_dectree_import.c

$(GEN_DECTREE_IMPORT): $(GEN_DECTREE_IMPORT_SRC) $(GENERATED_HEXAGON_FILES)
	$(CC) $(CFLAGS) -I$(BUILD_USER_DIR) $(GEN_DECTREE_IMPORT_SRC) -o $(GEN_DECTREE_IMPORT)

DECTREE_IMPORT=iset.py
$(DECTREE_IMPORT): $(GEN_DECTREE_IMPORT)
	$(call quiet-command, \
	    $(BUILD_USER_DIR)/$(GEN_DECTREE_IMPORT) $(DECTREE_IMPORT), \
	    "GEN", $(DECTREE_IMPORT))

#
# Step 4
# We use the dectree.py script to generate the decode tree header file
#
DECTREE_HEADER=dectree_generated.h
$(DECTREE_HEADER): $(TARGET_SRC_PATH)/dectree.py $(DECTREE_IMPORT)
	$(call quiet-command, \
	    $(TARGET_SRC_PATH)/dectree.py \
                $(BUILD_USER_DIR), \
	    "GEN", "Hexagon decode tree")

generated-files-y += $(GENERATED_HEXAGON_FILES) $(DECTREE_HEADER)

#
# semantics
#
meta-instructions.csv: $(TARGET_SRC_PATH)/meta-instructions.c $(QEMU_DEF_H)
	$(CC) $(CFLAGS) -I$(BUILD_USER_DIR) $< -c -E -o- | grep -v '^#' | grep -v '^\s*$$' | sed -En 's/\{(.*)\}/\"\{\1\}\"/p' > $@

semantics : lex.yy.c semantics.tab.c $(TARGET_SRC_PATH)/semantics/csvparser.c
	$(call quiet-command,$(HOST_CC) -I$(TARGET_SRC_PATH)/semantics -I. -o $@ $^,"CC","$(TARGET_DIR)semantics")

semantics-dbg : lex.yy.c semantics.tab.c $(TARGET_SRC_PATH)/semantics/csvparser.c
	$(call quiet-command,$(HOST_CC) -I$(TARGET_SRC_PATH)/semantics -DTOKEN_DEBUG -I. -o $@ $^,"CC","$(TARGET_DIR)semantics")

semantics.output : $(TARGET_SRC_PATH)/semantics/semantics.y $(TARGET_SRC_PATH)/semantics/semantics_struct.h
	$(call quiet-command,bison --defines=semantics.tab.h --output=semantics.tab.c -r all $<,"BISON","$(TARGET_DIR)semantics.output")

semantics.tab.c : $(TARGET_SRC_PATH)/semantics/semantics.y $(TARGET_SRC_PATH)/semantics/semantics_struct.h
	$(call quiet-command,bison --defines=semantics.tab.h --output=semantics.tab.c $<,"BISON","$(TARGET_DIR)semantics.tab.c")

lex.yy.c : $(TARGET_SRC_PATH)/semantics/semantics.lex $(TARGET_SRC_PATH)/semantics/semantics_struct.h
	$(call quiet-command,flex --outfile=lex.yy.c $<,"FLEX","$(TARGET_DIR)lex.yy.c")

target/hexagon/auto-tcg.c: semantics semantics-dbg meta-instructions.csv
	$(call quiet-command,./semantics meta-instructions.csv auto-tcg.h | indent -linux > $@,"GEN","target/hexagon/auto-tcg.c")

auto-tcg.h: target/hexagon/auto-tcg.c

target/hexagon/auto-tcg.o: target/hexagon/auto-tcg.c $(QEMU_DEF_H) config-target.h $(TARGET_SRC_PATH)/auto-tcg-enable.h

generated-files-y += target/hexagon/auto-tcg.o target/hexagon/auto-tcg.c lex.yy.c semantics.tab.c auto-tcg.h semantics
